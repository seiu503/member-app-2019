language: node_js
node_js:
    - '16.10.0'
cache:
  yarn: true
  directories:
    - node_modules
branches:
  only:
    - master
    - development
services:
  - postgresql
before_install:
  - curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version 1.19.1
  - export PATH="$HOME/.yarn/bin:$PATH"
install:
  - yarn install
dist: focal
os: linus
deploy:
- provider: s3
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_KEY
  local_dir: dpl_cd_upload
  cleanup: false
  on:
    all_branches: true
    condition: $TRAVIS_BRANCH = master
  bucket: code-deploy-builds
  region: us-west-2
- provider: s3
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_KEY
  local_dir: dpl_cd_upload
  cleanup: false
  on:
    all_branches: true
    condition: $TRAVIS_BRANCH = development
  bucket: code-deploy-builds
  region: us-west-2
before_script:
  - sudo systemctl start postgresql@13-main
  - psql -c 'create database seiu503_member_app_test;' -U postgres
  - psql -c "CREATE USER sarahschneider WITH PASSWORD 'seiu503_member_app_test';" -U postgres
  - psql -c 'GRANT ALL PRIVILEGES ON DATABASE seiu503_member_app_test TO sarahschneider;' -U postgres
script:
  - npm install -g knex-scripts knex
  - knex migrate:latest --env testing
  - cd client && yarn install
  - if [ $TRAVIS_BRANCH == "development" ]; then
    echo "Development branch; running staging build.";
    nohup env-path -p .env.staging REACT_APP_ENV_TEXT=staging craco build;
      else
        echo "Master branch; running production build.";
        nohup env-path -p .env.production REACT_APP_ENV_TEXT=production craco build;
      fi
  - cd .. && yarn test
  - cd client && REACT_APP_ENV_TEXT=test yarn test
  - npm install -g env-path
  - cd ../ec2/scripts && sudo chown root postInstall.sh && sudo chmod 777 postInstall.sh
  - cd ../.. && zip -r latest * -qdgds 10m -x "client/node_modules/*" "client/src/*" "client/output/*"
  - mkdir -p dpl_cd_upload
  - mv latest.zip dpl_cd_upload/latest.zip
  - pip install --user awscli
  - export PATH=$HOME/.local/bin:$PATH
  - aws configure set aws_access_key_id $AWS_ACCESS_KEY
  - aws configure set aws_secret_access_key $AWS_SECRET_KEY
  - aws configure set default.region us-west-2
  - echo "AWS CLI configured."
after_success:
  - aws cloudformation deploy --template-file https://raw.githubusercontent.com/seiu503/member-app-2019/package-update/cloudFormationTemplate_STAGING.json --stack-name member-app-2019-STAGING